/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 ./src/content/scene.gltf --transform --types 
Files: ./src/content/scene.gltf [7.18KB] > scene-transformed.glb [33.28KB] (-364%)
Author: Edoardo Galati (https://sketchfab.com/edoardogalati)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/polaroid-photo-sample-fe1d05e189dc4da197f6ba2717abe182
Title: Polaroid Photo Sample
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { PerspectiveCamera, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Object_3: THREE.Mesh
    Object_4: THREE.Mesh
    Object_5: THREE.Mesh
  }
  materials: {
    Frameblinn2SG: THREE.MeshStandardMaterial
    Framelambert79SG: THREE.MeshStandardMaterial
    initialShadingGroup: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model({
  assetURL,
  ...props
}: JSX.IntrinsicElements['group'] & { assetURL: string }) {
  const { nodes, materials } = useGLTF(assetURL) as GLTFResult
  const group = useRef()
  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    group.current.rotation.x = THREE.MathUtils.lerp(
      group.current.rotation.x,
      Math.cos(t / 2) / 20 + 0.25,
      0.1,
    )
    group.current.rotation.y = THREE.MathUtils.lerp(
      group.current.rotation.y,
      Math.sin(t / 4) / 20,
      0.1,
    )
    group.current.rotation.z = THREE.MathUtils.lerp(
      group.current.rotation.z,
      Math.sin(t / 8) / 20,
      0.1,
    )
    group.current.position.y = THREE.MathUtils.lerp(
      group.current.position.y,
      (-2 + Math.sin(t / 2)) / 2,
      0.1,
    )
  })
  return (
    <group {...props} dispose={null}>
      <PerspectiveCamera name="camera" fov={40} near={10} far={1000} position={[10, 0, 50]} />
      <pointLight intensity={10} position={[100, 50, 100]} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh
        geometry={nodes.Object_3.geometry}
        material={materials.Frameblinn2SG}
        position={[-12.943, 9.466, 16.326]}
        rotation={[-Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.Object_4.geometry}
        material={materials.Framelambert79SG}
        position={[-12.943, 9.466, 16.326]}
        rotation={[-Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.Object_5.geometry}
        material={materials.initialShadingGroup}
        position={[-12.943, 9.466, 16.326]}
        rotation={[-Math.PI / 2, 0, 0]}
      />
    </group>
  )
}

useGLTF.preload('/scene-transformed.glb')
